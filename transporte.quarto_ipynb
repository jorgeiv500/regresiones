{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Problemas de Transporte, Asignaci√≥n y Transbordo\"\n",
        "author: \"üë®‚Äçüè´ Jorge Iv√°n Romero Gelvez\"\n",
        "institute: \"üèõÔ∏è Universidad Jorge Tadeo Lozano\"\n",
        "date: today\n",
        "format:\n",
        "  revealjs:\n",
        "    theme: custom.scss\n",
        "    slide-number: true\n",
        "    highlight-style: dracula\n",
        "    code-line-numbers: true\n",
        "    code-annotations: hover\n",
        "    mermaid:\n",
        "      theme: forest\n",
        "    transition: fade\n",
        "    chalkboard: true\n",
        "    logo: Utadeo70-fondoblanco.png\n",
        "    toc: true\n",
        "    toc-title: \"Contenido\"\n",
        "    toc-depth: 2\n",
        "    scrollable: true\n",
        "execute:\n",
        "  echo: true\n",
        "  warning: false\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "\n",
        "## üéØ Introducci√≥n General\n",
        "\n",
        "::: {.fragment}\n",
        "- Transporte, Asignaci√≥n y Transbordo son modelos clave en log√≠stica y operaciones.\n",
        ":::\n",
        "::: {.fragment}\n",
        "- Todos se basan en minimizar el costo de mover recursos bajo restricciones.\n",
        ":::\n",
        "::: {.fragment}\n",
        "- Son casos particulares del problema de **flujo de costo m√≠nimo**.\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## üöö Problema de Transporte\n",
        "\n",
        "::: {.fragment}\n",
        "- Llevar productos desde fuentes a destinos al menor costo.\n",
        ":::\n",
        "::: {.fragment}\n",
        "- Oferta total = demanda total.\n",
        ":::\n",
        "::: {.fragment}\n",
        "- Representa un flujo directo sin nodos intermedios.\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## üåê Representaci√≥n del problema\n",
        "\n",
        "![Esquema del problema de transporte](https://machinelearninggeek.com/wp-content/uploads/2022/01/image-10.png)\n",
        "\n",
        "- Nodos: almacenes (or√≠genes) y proyectos (destinos).\n",
        "- Arcos: rutas posibles entre ellos con costos asociados.\n",
        "\n",
        "---\n",
        "\n",
        "## üî£ Formulaci√≥n Matem√°tica Transporte\n",
        "\n",
        "$$\n",
        "\\min \\sum_{i=1}^{m} \\sum_{j=1}^{n} c_{ij} x_{ij}\n",
        "$$\n",
        "Sujeto a:\n",
        "\n",
        "::: {.fragment}\n",
        "- Oferta: $\\sum_j x_{ij} = a_i$\n",
        ":::\n",
        "\n",
        "::: {.fragment}\n",
        "- Demanda: $\\sum_i x_{ij} = b_j$\n",
        ":::\n",
        "::: {.fragment}\n",
        "- No negatividad: $x_{ij} \\geq 0$\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Caso Hillier: Env√≠o de madera al mercado\n",
        "\n",
        "::: {.fragment}\n",
        "- Tres f√°bricas (f1, f2, f3) deben enviar madera a cinco mercados (m1‚Äìm5).\n",
        "- Se busca minimizar el costo total de transporte.\n",
        "- Modelo de **transporte cl√°sico** resuelto con Pyomo.\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "## üìã Datos del problema (Hillier)\n",
        "\n",
        "```python\n",
        "import pandas as pd\n",
        "\n",
        "df = pd.read_excel('madera.xlsx', 'tren', index_col=0)\n",
        "O = list(df.index.map(str))\n",
        "D = list(df.columns.map(str))\n",
        "\n",
        "cij = {(i, j): df.at[i, j] for i in O for j in D}\n",
        "oferta = {'f1': 15, 'f2': 20, 'f3': 15}\n",
        "demanda = {'m1': 11, 'm2': 12, 'm3': 9, 'm4': 10, 'm5': 8}\n",
        "```\n",
        "\n",
        "---\n",
        "\n",
        "## üî£ Costos y par√°metros\n",
        "\n",
        "```python\n",
        "print(cij)\n",
        "print(oferta)\n",
        "print(demanda)\n",
        "```\n",
        "\n",
        "üìå Resultado esperado:\n",
        "- Costos unitarios por ruta entre f√°bricas y mercados.\n",
        "- Oferta y demanda bien definidas.\n",
        "\n",
        "---\n",
        "\n",
        "## üßÆ Pyomo: Formulaci√≥n del modelo\n",
        "\n",
        "```python\n",
        "from pyomo.environ import *\n",
        "import os\n",
        "os.environ['NEOS_EMAIL'] = 'jorgei.romerog@utadeo.edu.co'\n",
        "\n",
        "caso1 = ConcreteModel()\n",
        "caso1.x = Var(O, D, domain=NonNegativeReals)\n",
        "\n",
        "caso1.obj = Objective(\n",
        "    expr=sum(cij[i, j] * caso1.x[i, j] for i in O for j in D),\n",
        "    sense=minimize)\n",
        "\n",
        "caso1.ro = ConstraintList()\n",
        "for i in O:\n",
        "    caso1.ro.add(expr=sum(caso1.x[i, j] for j in D) == oferta[i])\n",
        "\n",
        "caso1.rd = ConstraintList()\n",
        "for j in D:\n",
        "    caso1.rd.add(expr=sum(caso1.x[i, j] for i in O) == demanda[j])\n",
        "```\n",
        "\n",
        "---\n",
        "\n",
        "## ‚úÖ Soluci√≥n √≥ptima esperada\n",
        "\n",
        "Costo m√≠nimo total: **2816.0**\n",
        "\n",
        "Distribuci√≥n √≥ptima:\n",
        "- f1 ‚Üí m1: 6\n",
        "- f1 ‚Üí m3: 9\n",
        "- f2 ‚Üí m1: 2\n",
        "- f2 ‚Üí m4: 10\n",
        "- f2 ‚Üí m5: 8\n",
        "- f3 ‚Üí m1: 3\n",
        "- f3 ‚Üí m2: 12\n",
        "\n",
        "üéØ Las dem√°s rutas tienen asignaci√≥n cero.\n",
        "\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "## üë• Problema de Asignaci√≥n\n",
        "\n",
        "::: {.fragment}\n",
        "- Cada recurso se asigna a una tarea.\n",
        ":::\n",
        "::: {.fragment}\n",
        "- Oferta y demanda unitaria.\n",
        ":::\n",
        "::: {.fragment}\n",
        "- Variables binarias.\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## üî£ Formulaci√≥n Asignaci√≥n\n",
        "\n",
        "$$\n",
        "\\min \\sum_{i=1}^{n} \\sum_{j=1}^{n} c_{ij} x_{ij}\n",
        "$$\n",
        "Sujeto a:\n",
        "\n",
        "::: {.fragment}\n",
        "- $\\sum_j x_{ij} = 1 \\quad \\forall i$\n",
        ":::\n",
        "::: {.fragment}\n",
        "- $\\sum_i x_{ij} = 1 \\quad \\forall j$\n",
        ":::\n",
        "::: {.fragment}\n",
        "- $x_{ij} \\in \\{0,1\\}$\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## üß† Contexto del Problema de Asignaci√≥n\n",
        "\n",
        "::: {.fragment} \n",
        " El problema de asignaci√≥n es un **caso particular del problema de transporte**.\n",
        ":::\n",
        "::: {.fragment} \n",
        "Cada recurso (trabajador) debe asignarse a exactamente una tarea.\n",
        ":::\n",
        "::: {.fragment} \n",
        "La soluci√≥n busca **minimizar el costo total de asignaci√≥n**.\n",
        ":::\n",
        "::: {.fragment } \n",
        "Tiene aplicaciones en programaci√≥n de turnos, asignaci√≥n de personal, planificaci√≥n de producci√≥n, etc.\n",
        ":::\n",
        "::: {.fragment} \n",
        "El modelo matem√°tico es compacto y resoluble de forma eficiente con herramientas de IO.\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## üíª Pyomo: Asignaci√≥n Binaria\n"
      ],
      "id": "1388b84c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-line-numbers: \"1-17|19-27|29|37\"\n",
        "\n",
        "from pyomo.environ import *\n",
        "import os\n",
        "import random\n",
        "\n",
        "# Correo para acceso a NEOS\n",
        "os.environ['NEOS_EMAIL'] = 'jorgei.romerog@utadeo.edu.co'\n",
        "\n",
        "# Definici√≥n de conjuntos\n",
        "O = ['T1', 'T2', 'T3']\n",
        "D = ['P1', 'P2', 'P3']\n",
        "\n",
        "# Costos aleatorios entre trabajadores y tareas\n",
        "cij = {(i, j): random.randint(1, 10) for i in O for j in D}\n",
        "\n",
        "# Oferta y demanda unitaria\n",
        "oferta = {i: 1 for i in O}\n",
        "demanda = {j: 1 for j in D}\n",
        "\n",
        "# Modelo Pyomo\n",
        "caso_asig = ConcreteModel()\n",
        "caso_asig.x = Var(O, D, domain=Binary)\n",
        "\n",
        "# Funci√≥n objetivo: minimizar el costo total\n",
        "caso_asig.obj = Objective(\n",
        "    expr=sum(cij[i, j] * caso_asig.x[i, j] for i in O for j in D),\n",
        "    sense=minimize\n",
        ")\n",
        "\n",
        "# Restricciones de asignaci√≥n (oferta)\n",
        "caso_asig.ro = ConstraintList()\n",
        "for i in O:\n",
        "    caso_asig.ro.add(expr=sum(caso_asig.x[i, j] for j in D) == oferta[i])\n",
        "\n",
        "# Restricciones de tareas (demanda)\n",
        "caso_asig.rd = ConstraintList()\n",
        "for j in D:\n",
        "    caso_asig.rd.add(expr=sum(caso_asig.x[i, j] for i in O) == demanda[j])\n",
        "\n",
        "# Resoluci√≥n con NEOS usando CPLEX\n",
        "solver_manager = SolverManagerFactory('neos')\n",
        "results = solver_manager.solve(caso_asig, solver='cplex')\n",
        "\n",
        "# Resultados\n",
        "optimo = caso_asig.obj()\n",
        "print('El √≥ptimo es =', optimo)\n",
        "for i in O:\n",
        "    for j in D:\n",
        "        print(i, j, caso_asig.x[i, j]())"
      ],
      "id": "24311f61",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "## üîÅ Problema de Transbordo\n",
        "\n",
        "::: {.fragment}\n",
        "- Permite nodos intermedios.\n",
        ":::\n",
        "::: {.fragment}\n",
        "- Generalizaci√≥n del modelo de transporte.\n",
        ":::\n",
        "::: {.fragment}\n",
        "- Algunos nodos tienen $b_i = 0$.\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "## üî£ Formulaci√≥n Matem√°tica Transbordo\n",
        "\n",
        "$$\n",
        "\\min \\sum_{(i,j) \\in A} c_{ij} x_{ij}\n",
        "$$\n",
        "\n",
        "Sujeto a:\n",
        "\n",
        "::: {.fragment}\n",
        "- Balance: $\\sum_j x_{ij} - \\sum_j x_{ji} = b_i$\n",
        ":::\n",
        "::: {.fragment}\n",
        "- Capacidad: $l_{ij} \\leq x_{ij} \\leq u_{ij}$\n",
        ":::\n",
        "::: {.fragment}\n",
        "- No negatividad: $x_{ij} \\geq 0$\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## üîÅ Enunciado del Problema de Transbordo\n",
        "\n",
        "::: {.fragment .fade-in-then-out}\n",
        "Una empresa distribuye productos desde 2 plantas hacia 3 tiendas.\n",
        ":::\n",
        "::: {.fragment .fade-in-then-out}\n",
        "Para reducir costos log√≠sticos, considera usar **centros de consolidaci√≥n (hubs)** antes de llegar a las tiendas.\n",
        ":::\n",
        "::: {.fragment .fade-in-then-out}\n",
        "Cada planta tiene una **oferta limitada**, y cada tienda tiene una **demanda fija**.\n",
        ":::\n",
        "::: {.fragment .fade-in-then-out}\n",
        "Los **costos de env√≠o** dependen del trayecto: planta ‚Üí centro ‚Üí tienda.\n",
        ":::\n",
        "::: {.fragment .fade-in-then-out}\n",
        "Se desea encontrar la forma **m√°s econ√≥mica** de cubrir toda la demanda respetando la capacidad de las plantas.\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## üåê Diagrama del modelo de Transbordo\n",
        "\n",
        "\n",
        "```{mermaid}\n",
        "flowchart LR\n",
        "  subgraph Fuentes\n",
        "    P1((P1)):::source\n",
        "    P2((P2)):::source\n",
        "  end\n",
        "\n",
        "  subgraph Centro\n",
        "    H1((H1)):::hub\n",
        "  end\n",
        "\n",
        "  subgraph Tiendas\n",
        "    T1((T1)):::sink\n",
        "    T2((T2)):::sink\n",
        "    T3((T3)):::sink\n",
        "  end\n",
        "\n",
        "  P1 --> H1\n",
        "  P2 --> H1\n",
        "  H1 --> T1\n",
        "  H1 --> T2\n",
        "  H1 --> T3\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "## üìä Comparativa entre Modelos de Flujo\n",
        "\n",
        "| Modelo      | Nodos         | Arcos         | Variables        | Naturaleza      | Balance \\(b_i\\)         |\n",
        "|-------------|----------------|---------------|------------------|------------------|--------------------------|\n",
        "| Transporte  | Origen, destino | Total \\(m \\times n\\) | Continuas \\(x_{ij} \\geq 0\\) | Flujo directo   | Oferta/demanda exacta   |\n",
        "| Asignaci√≥n  | Agentes, tareas | Cuadrada \\(n \\times n\\) | Binarias \\(x_{ij} \\in \\{0,1\\}\\) | 1 a 1 (unitaria) | Cada nodo balanceado \\(=1\\) |\n",
        "| Transbordo  | Origen, intermedio, destino | Flexible seg√∫n red | Continuas \\(x_{ij} \\geq 0\\) | Flujo con nodos internos | \\(b_i < 0, > 0, = 0\\) seg√∫n rol |\n",
        "\n",
        "---\n",
        "\n",
        "## üß† Conclusi√≥n: IO y Modelos de Flujo\n",
        "\n",
        "- El modelo de transbordo es **una extensi√≥n de PL aplicada a redes**.\n",
        "- Integra:\n",
        "  - Restricciones estructurales de red (incidencia).\n",
        "  - Variables sobre aristas.\n",
        "  - Eficiencia computacional mediante algoritmos especializados.\n",
        "- Es uno de los pilares de la **Investigaci√≥n de Operaciones en redes**.\n"
      ],
      "id": "31fe395d"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\jorgei.romerog\\AppData\\Local\\anaconda3\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}