---
title: "Problemas de Transporte, Asignaci√≥n y Transbordo"
author: "üë®‚Äçüè´ Jorge Iv√°n Romero Gelvez"
institute: "üèõÔ∏è Universidad Jorge Tadeo Lozano"
date: today
format:
  revealjs:
    theme: custom.scss
    slide-number: true
    highlight-style: dracula
    code-line-numbers: true
    code-annotations: hover
    mermaid:
      theme: forest
    transition: fade
    chalkboard: true
    logo: Utadeo70-fondoblanco.png
    toc: true
    toc-title: "Contenido"
    toc-depth: 2
    scrollable: true
execute:
  echo: true
  warning: false
jupyter: python3
---

## üéØ Introducci√≥n General

::: {.fragment}
- Transporte, Asignaci√≥n y Transbordo son modelos clave en log√≠stica y operaciones.
:::
::: {.fragment}
- Todos se basan en minimizar el costo de mover recursos bajo restricciones.
:::
::: {.fragment}
- Son casos particulares del problema de **flujo de costo m√≠nimo**.
:::

---

## üöö Problema de Transporte

::: {.fragment}
- Llevar productos desde fuentes a destinos al menor costo.
:::
::: {.fragment}
- Oferta total = demanda total.
:::
::: {.fragment}
- Representa un flujo directo sin nodos intermedios.
:::

---

## üåê Representaci√≥n del problema

![Esquema del problema de transporte](https://machinelearninggeek.com/wp-content/uploads/2022/01/image-10.png)

- Nodos: almacenes (or√≠genes) y proyectos (destinos).
- Arcos: rutas posibles entre ellos con costos asociados.

---

## üî£ Formulaci√≥n Matem√°tica Transporte

$$
\min \sum_{i=1}^{m} \sum_{j=1}^{n} c_{ij} x_{ij}
$$
Sujeto a:

::: {.fragment}
- Oferta: $\sum_j x_{ij} = a_i$
:::

::: {.fragment}
- Demanda: $\sum_i x_{ij} = b_j$
:::
::: {.fragment}
- No negatividad: $x_{ij} \geq 0$
:::
---

## Caso Hillier: Env√≠o de madera al mercado

::: {.fragment}
- Tres f√°bricas (f1, f2, f3) deben enviar madera a cinco mercados (m1‚Äìm5).
- Se busca minimizar el costo total de transporte.
- Modelo de **transporte cl√°sico** resuelto con Pyomo.
:::

---

## üìã Datos del problema (Hillier)

```python
import pandas as pd

df = pd.read_excel('madera.xlsx', 'tren', index_col=0)
O = list(df.index.map(str))
D = list(df.columns.map(str))

cij = {(i, j): df.at[i, j] for i in O for j in D}
oferta = {'f1': 15, 'f2': 20, 'f3': 15}
demanda = {'m1': 11, 'm2': 12, 'm3': 9, 'm4': 10, 'm5': 8}
```

---

## üî£ Costos y par√°metros

```python
print(cij)
print(oferta)
print(demanda)
```

üìå Resultado esperado:
- Costos unitarios por ruta entre f√°bricas y mercados.
- Oferta y demanda bien definidas.

---

## üßÆ Pyomo: Formulaci√≥n del modelo

```python
from pyomo.environ import *
import os
os.environ['NEOS_EMAIL'] = 'jorgei.romerog@utadeo.edu.co'

caso1 = ConcreteModel()
caso1.x = Var(O, D, domain=NonNegativeReals)

caso1.obj = Objective(
    expr=sum(cij[i, j] * caso1.x[i, j] for i in O for j in D),
    sense=minimize)

caso1.ro = ConstraintList()
for i in O:
    caso1.ro.add(expr=sum(caso1.x[i, j] for j in D) == oferta[i])

caso1.rd = ConstraintList()
for j in D:
    caso1.rd.add(expr=sum(caso1.x[i, j] for i in O) == demanda[j])
```

---

## ‚úÖ Soluci√≥n √≥ptima esperada

Costo m√≠nimo total: **2816.0**

Distribuci√≥n √≥ptima:
- f1 ‚Üí m1: 6
- f1 ‚Üí m3: 9
- f2 ‚Üí m1: 2
- f2 ‚Üí m4: 10
- f2 ‚Üí m5: 8
- f3 ‚Üí m1: 3
- f3 ‚Üí m2: 12

üéØ Las dem√°s rutas tienen asignaci√≥n cero.



---

## üë• Problema de Asignaci√≥n

::: {.fragment}
- Cada recurso se asigna a una tarea.
:::
::: {.fragment}
- Oferta y demanda unitaria.
:::
::: {.fragment}
- Variables binarias.
:::

---

## üî£ Formulaci√≥n Asignaci√≥n

$$
\min \sum_{i=1}^{n} \sum_{j=1}^{n} c_{ij} x_{ij}
$$
Sujeto a:

::: {.fragment}
- $\sum_j x_{ij} = 1 \quad \forall i$
:::
::: {.fragment}
- $\sum_i x_{ij} = 1 \quad \forall j$
:::
::: {.fragment}
- $x_{ij} \in \{0,1\}$
:::
---

## üß† Contexto del Problema de Asignaci√≥n

::: {.fragment} 
 El problema de asignaci√≥n es un **caso particular del problema de transporte**.
:::
::: {.fragment} 
Cada recurso (trabajador) debe asignarse a exactamente una tarea.
:::
::: {.fragment} 
La soluci√≥n busca **minimizar el costo total de asignaci√≥n**.
:::
::: {.fragment } 
Tiene aplicaciones en programaci√≥n de turnos, asignaci√≥n de personal, planificaci√≥n de producci√≥n, etc.
:::
::: {.fragment} 
El modelo matem√°tico es compacto y resoluble de forma eficiente con herramientas de IO.
:::

---
## üíª Pyomo: Asignaci√≥n Binaria

```{python}
#| code-line-numbers: "1-17|19-27|29|37"

from pyomo.environ import *
import os
import random

# Correo para acceso a NEOS
os.environ['NEOS_EMAIL'] = 'jorgei.romerog@utadeo.edu.co'

# Definici√≥n de conjuntos
O = ['T1', 'T2', 'T3']
D = ['P1', 'P2', 'P3']

# Costos aleatorios entre trabajadores y tareas
cij = {(i, j): random.randint(1, 10) for i in O for j in D}

# Oferta y demanda unitaria
oferta = {i: 1 for i in O}
demanda = {j: 1 for j in D}

# Modelo Pyomo
caso_asig = ConcreteModel()
caso_asig.x = Var(O, D, domain=Binary)

# Funci√≥n objetivo: minimizar el costo total
caso_asig.obj = Objective(
    expr=sum(cij[i, j] * caso_asig.x[i, j] for i in O for j in D),
    sense=minimize
)

# Restricciones de asignaci√≥n (oferta)
caso_asig.ro = ConstraintList()
for i in O:
    caso_asig.ro.add(expr=sum(caso_asig.x[i, j] for j in D) == oferta[i])

# Restricciones de tareas (demanda)
caso_asig.rd = ConstraintList()
for j in D:
    caso_asig.rd.add(expr=sum(caso_asig.x[i, j] for i in O) == demanda[j])

# Resoluci√≥n con NEOS usando CPLEX
solver_manager = SolverManagerFactory('neos')
results = solver_manager.solve(caso_asig, solver='cplex')

# Resultados
optimo = caso_asig.obj()
print('El √≥ptimo es =', optimo)
for i in O:
    for j in D:
        print(i, j, caso_asig.x[i, j]())

```

---

## üîÅ Problema de Transbordo

::: {.fragment}
- Permite nodos intermedios.
:::
::: {.fragment}
- Generalizaci√≥n del modelo de transporte.
:::
::: {.fragment}
- Algunos nodos tienen $b_i = 0$.
:::

---


## üî£ Formulaci√≥n Matem√°tica Transbordo

$$
\min \sum_{(i,j) \in A} c_{ij} x_{ij}
$$

Sujeto a:

::: {.fragment}
- Balance: $\sum_j x_{ij} - \sum_j x_{ji} = b_i$
:::
::: {.fragment}
- Capacidad: $l_{ij} \leq x_{ij} \leq u_{ij}$
:::
::: {.fragment}
- No negatividad: $x_{ij} \geq 0$
:::

---

## üîÅ Enunciado del Problema de Transbordo

::: {.fragment .fade-in-then-out}
Una empresa distribuye productos desde 2 plantas hacia 3 tiendas.
:::
::: {.fragment .fade-in-then-out}
Para reducir costos log√≠sticos, considera usar **centros de consolidaci√≥n (hubs)** antes de llegar a las tiendas.
:::
::: {.fragment .fade-in-then-out}
Cada planta tiene una **oferta limitada**, y cada tienda tiene una **demanda fija**.
:::
::: {.fragment .fade-in-then-out}
Los **costos de env√≠o** dependen del trayecto: planta ‚Üí centro ‚Üí tienda.
:::
::: {.fragment .fade-in-then-out}
Se desea encontrar la forma **m√°s econ√≥mica** de cubrir toda la demanda respetando la capacidad de las plantas.
:::

---

## üåê Diagrama del modelo de Transbordo

```{mermaid}
flowchart LR
  subgraph Fuentes
    P1((P1)):::source
    P2((P2)):::source
  end

  subgraph Centro
    H1((H1)):::hub
  end

  subgraph Tiendas
    T1((T1)):::sink
    T2((T2)):::sink
    T3((T3)):::sink
  end

  P1 --> H1
  P2 --> H1
  H1 --> T1
  H1 --> T2
  H1 --> T3
```




---

## üìä Comparativa entre Modelos de Flujo

| Modelo      | Nodos         | Arcos         | Variables        | Naturaleza      | Balance \(b_i\)         |
|-------------|----------------|---------------|------------------|------------------|--------------------------|
| Transporte  | Origen, destino | Total \(m \times n\) | Continuas \(x_{ij} \geq 0\) | Flujo directo   | Oferta/demanda exacta   |
| Asignaci√≥n  | Agentes, tareas | Cuadrada \(n \times n\) | Binarias \(x_{ij} \in \{0,1\}\) | 1 a 1 (unitaria) | Cada nodo balanceado \(=1\) |
| Transbordo  | Origen, intermedio, destino | Flexible seg√∫n red | Continuas \(x_{ij} \geq 0\) | Flujo con nodos internos | \(b_i < 0, > 0, = 0\) seg√∫n rol |

---

## üß† Conclusi√≥n: IO y Modelos de Flujo

- El modelo de transbordo es **una extensi√≥n de PL aplicada a redes**.
- Integra:
  - Restricciones estructurales de red (incidencia).
  - Variables sobre aristas.
  - Eficiencia computacional mediante algoritmos especializados.
- Es uno de los pilares de la **Investigaci√≥n de Operaciones en redes**.

