---
title: "👥 Agrupamiento K-Means"
subtitle: "🛍️ Análisis de clientes en un centro comercial"
author: "👨‍🏫 Jorge Iván Romero Gelvez"
institute: "🏛️ Universidad Jorge Tadeo Lozano"
date: "📅 Abril 2025"
format:
  revealjs:
    theme: [default, custom.scss]
    slide-number: true
    highlight-style: dracula
    code-line-numbers: true
    code-annotations: hover
    transition: fade
    toc: true
    toc-title: "Contenido"
    toc-depth: 1
    incremental: true
    scrollable: true
execute:
  echo: true
  warning: false
  message: false
  freeze: false
jupyter: python3
---

## 🧠 ¿Qué es el Clustering?

- El clustering busca **agrupar observaciones similares** sin usar etiquetas.
- Ideal para segmentación de mercado, detección de patrones, compresión de datos, etc.
- K-Means es uno de los algoritmos más populares.

---

## 📊 Dataset: Clientes de un Centro Comercial

```{python}
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

mall_url = "https://raw.githubusercontent.com/jorgeiv500/IA--702304--INTELIGENCIA-ARTIFICIAL/refs/heads/main/Mall_Customers.csv"
df = pd.read_csv(mall_url)
df.head()
```

---

## 📈 Visualización inicial

```{python}
df.plot.scatter(x="Annual Income (k$)", y="Spending Score (1-100)", title="Distribución de Clientes")
```

---

## 🤖 ¿Cómo funciona K-Means?

1. Elegir el número de clústeres **K**
2. Inicializar aleatoriamente los centroides
3. Asignar cada punto al centroide más cercano
4. Calcular nuevos centroides como media de los puntos asignados
5. Repetir hasta converger

---

## ⚙️ Selección del número óptimo de K

- Se usa el método del codo:
  - Ejecuta K-Means para distintos K
  - Calcula la **Suma de Errores Cuadráticos (SSE)** para cada K
  - El “codo” indica el K óptimo

```{python}
from sklearn.cluster import KMeans

X = df.iloc[:, [3, 4]].values
sse = []

for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, init='k-means++', random_state=42)
    kmeans.fit(X)
    sse.append(kmeans.inertia_)

plt.plot(range(1, 11), sse, marker='o')
plt.title("Método del Codo")
plt.xlabel("Número de Clústeres (K)")
plt.ylabel("SSE")
plt.grid(True)
plt.show()
```

---

## ✅ Aplicación de K-Means con K=5

```{python}
kmeans = KMeans(n_clusters=5, init='k-means++', random_state=42)
y_kmeans = kmeans.fit_predict(X)
```

---

## 🖼️ Visualización de clústeres

```{python}
colors = ['red', 'blue', 'green', 'cyan', 'magenta']
plt.figure(figsize=(8, 5))

for i in range(5):
    plt.scatter(X[y_kmeans == i, 0], X[y_kmeans == i, 1], s=80, c=colors[i], label=f"Clúster {i+1}")

plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='yellow', marker='X', label='Centroides')
plt.title("Segmentación de Clientes (K=5)")
plt.xlabel("Ingreso Anual (k$)")
plt.ylabel("Spending Score (1-100)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
```

---

## 📌 Interpretación de Resultados

- 🎯 K-Means logra identificar **grupos de clientes con patrones distintos**:
  - Altos ingresos vs. bajo gasto
  - Bajo ingreso y alto gasto
  - Etc.
- Permite realizar **estrategias comerciales personalizadas**.

---

## 🎓 Conclusiones

- K-Means es simple, eficiente y útil para **segmentación no supervisada**
- El método del codo ayuda a definir K
- Ideal para tareas de **marketing, salud, industria, IA, etc.**

---

## 🧠 ¿Dónde usar K-Means?

- 🎯 Segmentación de clientes
- 🏥 Agrupación de pacientes por síntomas
- 📡 Compresión de imágenes
- 🤖 Inicialización de redes neuronales

> *El aprendizaje no supervisado revela la estructura interna de los datos sin etiquetas.* 🎯
```

---

